
name: lint

on:
  pull_request:
    branches: [ master ]

jobs:
  check-version-populate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt install jq -y

      - name: Check versions
        run: |
          officialVersion=$(cat package.json | jq -r '.version')
          lockVersion1=$(cat package-lock.json | jq -r '.version')
          lockVersion2=$(cat package-lock.json | jq -r '.packages | .[] | select(.name == "floor-bot") | .version')

          if ["$officialVersion" != "$lockVersion1"]; then
            echo "::error file=package-lock.json::Must update package-lock.json main version too, use 'npm install'."
            exit 1
          fi

          if ["$officialVersion" != "$lockVersion2"]; then
            echo "::error file=package-lock.json::Must update package-lock.json dependency version too, use 'npm install'."
            exit 1
          fi

  run-version-update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // console.log(JSON.stringify(context.payload.pull_request))
            check = async () => {
              const response = await github.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                per_page: 100
              });

              const labelsData = await github.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
              });
              const labels = labelsData.data.map(label => label.name)
              console.log({ labels });

              const filenames = response.data.map(e => e.filename)
              console.log({ filenames })

              let msg = "Version modified"
              let status = filenames.includes("package.json") ? "success" : "failure"
              let skip = labels.includes("skip-version-check")

              console.log({ msg, status, skip})
              if (skip === true) {
                msg = "Skipping version update check"
                status = "success"
              } else if (status === "failure") {
                msg = "You need to update the version in package.json"
              } else {
                const packagePatch = response.data.filter(e => e.filename === "package.json")[0].patch
                const updated =
                  packagePatch.match(/\-\s+"version":/) &&
                  packagePatch.match(/\+\s+"version":/);

                  if (!updated){
                  status = "failure"
                  msg = "Package.json modified but version not updated"
                }
              }

              console.log({ status, msg })
              await github.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: status,
                context: 'allobot/version-update',
                description: msg
              });
            }

            check();
