import { celebrate } from "celebrate";
import { NextFunction, Request, Response, Router } from "express";
import { loginSchema } from "../../schemas/auth";
import middlewares from "../middlewares";

const route = Router();

/**
 *  @openapi
 *  components:
 *    schemas:
 *      UserLogin:
 *        required:
 *        - googleToken
 *        properties:
 *          googleToken:
 *            type: string
 *            description: Token generated by Google
 *
 *      LoginResponse:
 *        required:
 *        - token
 *        - user
 *        properties:
 *          token:
 *            type: string
 *            description: JWT token to access this API's resources
 *          user:
 *            $ref: "#/components/schemas/User"
 */

export default (app: Router) => {
  app.use("/", route);

  /**
   *  @openapi
   *  /login:
   *    post:
   *      description: Login endpoint. If the user is not registered, the system will register it.
   *      summary: Login
   *      operationId: post_login
   *      tags:
   *      - Auth
   *      requestBody:
   *        content:
   *          application/json:
   *            schema:
   *              $ref: "#/components/schemas/UserLogin"
   *      responses:
   *        200:
   *          description: Generated token
   *          content:
   *            application/json:
   *              schema:
   *                $ref: "#/components/schemas/LoginResponse"
   *        401:
   *          description: Authentication failed
   *          content:
   *            application/json:
   *              schema:
   *                $ref: "#/components/schemas/HTTPException"
   *        422:
   *          description: Validation error
   *          content:
   *            application/json:
   *              schema:
   *                $ref: "#/components/schemas/HTTPValidationError"
   */
  route.post(
    "/login",
    celebrate(loginSchema()),
    async (req: Request, res: Response, next: NextFunction) => {
      return res.json({}).status(200);
    }
  );

  /**
   *  @openapi
   *  /logout:
   *    post:
   *      description: Logout. Actually, it doesn't do anything.
   *      summary: Logout
   *      operationId: post_logout
   *      deprecated: true
   *      tags:
   *      - Auth
   *      responses:
   *        200:
   *          description: Logout correct
   *          content:
   *            application/json:
   *              schema:
   *                $ref: "#/components/schemas/HTTPException"
   *        401:
   *          description: Authentication failed
   *          content:
   *            application/json:
   *              schema:
   *                $ref: "#/components/schemas/HTTPException"
   */
  route.post(
    "/logout",
    middlewares.isAuth,
    (req: Request, res: Response, next: NextFunction) => {
      return res.status(200).json({detail: "Logout correct"});
    }
  );
};
